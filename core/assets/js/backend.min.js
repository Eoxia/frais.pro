window.eoxiaJS.fraisPro = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.init = function() {
	window.eoxiaJS.fraisPro.event();
};

/**
 * Les évènements de la recherche.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.event = function() {
	jQuery( document ).on( 'click', '.dropdown-content li', window.eoxiaJS.fraisPro.selectStatus );
};

/**
 * Met l'ID du status dans un input caché.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param MouseEvent L'état de la souris au moment du clic
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.selectStatus = function( event ) {
	var parent = jQuery( this ).closest( '.wpeo-dropdown' );

	parent.find( 'input' ).val( jQuery( this ).data( 'id' ) );
	parent.find( 'button > span' ).html( jQuery( this ).html() );
};

/**
 * Initialise l'objet "NDF" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.2.0
 */

window.eoxiaJS.fraisPro.Line = {};

/**
 * Display new created line.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.Line.displayLine = function( element, response ) {
	jQuery( 'div.list-line' ).prepend( response.data.view );
};

/**
 * Delete a line from display after user delete it.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.Line.deleteLineFromDisplay = function( element, response ) {
	jQuery( 'div.line[data-id=' + response.data.line.id + ']' ).fadeOut();
};

/**
 * Initialise l'objet "typeNote" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.2.0
 * @version 1.2.0
 */

window.eoxiaJS.fraisPro.typeNote = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 * *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.typeNote.init = function() {
	window.eoxiaJS.fraisPro.typeNote.event();
};

/**
 * Gestion des évènements
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.typeNote.event = function() {
	jQuery( document ).on( 'click', '.content .toggle .content .item', window.eoxiaJS.fraisPro.typeNote.select );
};

/**
 * Change le 'lable' du toggle.
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @param  {ClickEvent} event L'état lors du clic.
 * @return {void}
 *
 */
window.eoxiaJS.fraisPro.typeNote.select = function( event ) {
	var row = jQuery( this ).closest( '.row' );
	event.stopPropagation();
	row.find( '.toggle .label' ).text( jQuery( this ).text() );
	row.find( '.toggle input' ).val( jQuery( this ).data( 'id' ) );
	row.find( '.toggle .content' ).removeClass( 'active' );
	if ( ! row.hasClass( 'add' ) ) {
		jQuery( this ).each( window.eoxiaJS.fraisPro.line.saveNDF );
	}

	window.eoxiaJS.fraisPro.typeNote.setStateField( row, 'km', false );
	window.eoxiaJS.fraisPro.typeNote.setStateField( row, 'ttc', true );
	window.eoxiaJS.fraisPro.typeNote.setStateField( row, 'tva', true );

	if ( jQuery( this ).data( 'special-treatment' ) ) {
		window.eoxiaJS.fraisPro.typeNote[ jQuery( this ).data( 'special-treatment' ) ]( row );
	}
};

window.eoxiaJS.fraisPro.typeNote.km_calculation = function( row ) {
	window.eoxiaJS.fraisPro.typeNote.setStateField( row, 'km', true );
	window.eoxiaJS.fraisPro.typeNote.setStateField( row, 'ttc', false );
	window.eoxiaJS.fraisPro.typeNote.setStateField( row, 'tva', false );
};

/**
 * Rend un 'contenteditable' editable ou pas.
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @param  {HTMLUListElement} element L'élément contenant les champs 'contenteditable'.
 * @param  {string} nameField         Le champ contenteditable en question.
 * @param  {boolean} enabled          Rendre enabled ou pas.
 * @return {void}
 */
window.eoxiaJS.fraisPro.typeNote.setStateField = function( element, nameField, enabled ) {
	element.find( '.' + nameField + ' span[contenteditable]' ).attr( 'contenteditable', enabled );

	if ( enabled ) {
		element.find( '.' + nameField ).removeClass( 'disabled' );
	} else {
		element.find( '.' + nameField ).addClass( 'disabled' );
	}
};

/**
 * Initialise l'objet note de frais ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note = {};

/**
 * Keep the button in memory.
 *
 * @type {Object}
 */
 window.eoxiaJS.fraisPro.note.currentButton;

/**
 * Keep the media frame in memory.
 * @type {Object}
 */
 window.eoxiaJS.fraisPro.note.mediaFrame;

/**
* Keep the media frame in memory.
* @type {Object}
*/
 window.eoxiaJS.fraisPro.note.focusedElement;

/**
 * Keep the selected media in memory.
 * @type {Object}
 */
 window.eoxiaJS.fraisPro.note.selectedInfos = [];

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.init = function() {
	jQuery( document ).on( 'click', '.list-note .note', window.eoxiaJS.fraisPro.note.goToLink );
	jQuery( document ).on( 'click', '.display-method span.wpeo-button', window.eoxiaJS.fraisPro.note.changeDisplayMode );
	jQuery( document ).on( 'click', '.wrap-frais-pro .fraispro-mass-line-creation', window.eoxiaJS.fraisPro.note.openMedia );
};

/**
 * Redirige l'utilisateur sur la note
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.goToLink = function( event ) {
	window.location.href = jQuery( this ).data( 'link' );
};

/**
 * Redirige l'utilisateur sur la note
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.goToNote = function( element, response ) {
	window.location.href = response.data.link;
};

/**
 * Redirige l'utilisateur sur la note
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.changeDisplayMode = function( event ) {
	event.preventDefault();
	jQuery( this ).closest( 'div.single-note' ).toggleClass( 'grid list' );
	jQuery( this ).closest( 'div.display-method' ).children( 'span' ).toggleClass( 'active' );
};

/**
 * [description]
 * @param  {[type]} event [description]
 * @return {[type]}       [description]
 */
window.eoxiaJS.fraisPro.note.openMedia = function( event ) {
	window.eoxiaJS.fraisPro.note.currentButton = jQuery( this );
	event.preventDefault();

	window.eoxiaJS.fraisPro.note.mediaFrame = new window.wp.media.view.MediaFrame.Post({}).open();
	window.eoxiaJS.fraisPro.note.mediaFrame.on( 'insert', function() {
		window.eoxiaJS.fraisPro.note.selectedFile();
	} );
};
/**
 * [description]
 * @param  {[type]} element [description]
 * @return {[type]}         [description]
 */
window.eoxiaJS.fraisPro.note.selectedFile = function( element ) {
	var data = {
		action: 'fp_create_line_from_picture',
		_wpnonce: window.eoxiaJS.fraisPro.note.currentButton.attr( 'data-nonce' ),
		files_id: window.eoxiaJS.fraisPro.note.selectedInfos,
		note_id: window.eoxiaJS.fraisPro.note.currentButton.attr( 'data-parent-id' )
	};

	window.eoxiaJS.fraisPro.note.mediaFrame.state().get( 'selection' ).map( function( attachment ) {
		window.eoxiaJS.fraisPro.note.selectedInfos.push( attachment.id );
	} );

	jQuery( '.single-note' ).find( '.date_modified_value' ).addClass( 'loading' );
	window.eoxiaJS.fraisPro.note.currentButton.addClass( 'loading' );
	jQuery.post( window.ajaxurl, data, function( response ) {
		window.eoxiaJS.fraisPro.note.currentButton.removeClass( 'loading' );
		window.eoxiaJS.fraisPro.note.currentButton = undefined;
		window.eoxiaJS.fraisPro.note.selectedInfos = [];
		window.eoxiaJS.fraisPro.note.mediaFrame = undefined;
		if ( response.success ) {
			jQuery( 'div.list-line' ).prepend( response.data.view );
		}
	}, 'json' );
};

/**
 * Delete the archived note from display.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.note_is_marked_as_archive = function( element, response ) {

	// Check if the user is on list or in a single note
	if ( 1 === jQuery( '.list-note' ).length ) {
		jQuery( 'tr.note[data-id=' + response.data.note.id + ']' ).fadeOut();
	} else {
		window.location.href = response.data.link;
	}
};

/**
 * Initialise l'objet note de frais ainsi que la méthode "init" de l'objet "search" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.search = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.search.init = function() {
	window.eoxiaJS.fraisPro.search.event();
};

/**
 * Les évènements de la recherche.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.search.event = function() {
	jQuery( '.bloc-search' ).on( 'click', '.autocomplete-search-list li', window.eoxiaJS.fraisPro.search.selectUser );
};

/**
 * Met l'ID de l'utilisateur dans un input caché.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param MouseEvent L'état de la souri au moment du clic
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.search.selectUser = function( event ) {
	var parent = jQuery( this ).closest( '.wpeo-autocomplete' );

	parent.find( '.autocomplete-icon-after' ).click();

	parent.find( 'input[name="selected_user_id"]' ).val(jQuery( this ).data( 'id' ) );
	parent.find( 'input.autocomplete-search-input' ).val( jQuery( this ).data( 'result' ) );
};

/**
 * Le callback en cas de réussite à la requête Ajax "fp_search_notes".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.search.searchedSuccess = function( triggeredElement, response ) {
	jQuery( 'table.list-note' ).replaceWith( response.data.view );
};

/**
 * Initialise l'objet "updateManager" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.4.0
 * @version 1.4.0
 */

window.eoxiaJS.fraisPro.updateManager = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.updateManager.init = function() {
	window.eoxiaJS.fraisPro.updateManager.requestUpdate();
	window.addEventListener( 'beforeunload', window.eoxiaJS.fraisPro.updateManager.safeExit );
};

window.eoxiaJS.fraisPro.updateManager.requestUpdateFunc = {
	endMethod: []
};
window.eoxiaJS.fraisPro.updateManager.requestUpdate = function( args ) {
	var key             = jQuery( 'input.current-key' ).val();
	var versionToUpdate = jQuery( 'input[name="version_available[]"]:first' ).val();
	var action          = jQuery( 'input[name="version[' + versionToUpdate + '][action][]"]:first' ).val();
	var description     = jQuery( 'input[name="version[' + versionToUpdate + '][description][]"]:first' ).val();
	var data = {
		action: action,
		versionToUpdate: versionToUpdate,
		args: args
	};

	if ( versionToUpdate ) {
		if ( ( args && ! args.more ) || ! args ) {
			jQuery( '.log' ).append( '<li><h2>Update <strong>' + versionToUpdate + '</strong> in progress...</h2></li>' );
		}

		if ( action ) {
			if ( args && args.moreDescription ) {
				description += args.moreDescription;
			}

			jQuery( '.log' ).append( '<li>' + description + '</li>' );

			jQuery.post( ajaxurl, data, function( response ) {
				jQuery( '.log img' ).remove();

				if ( response.data.done ) {
					if ( response.data.args && response.data.args.doneDescription ) {
						jQuery( '.log' ).append( '<li>' + response.data.args.doneDescription + '</li>' );
						delete response.data.args.doneDescription;
					}

					jQuery( 'input[name="version[' + versionToUpdate + '][action][]"]:first' ).remove();
					jQuery( 'input[name="version[' + versionToUpdate + '][description][]"]:first' ).remove();

					if ( 0 == jQuery( 'input[name="version[' + versionToUpdate + '][action][]"]:first' ).length ) {
						delete response.data.args;

						jQuery( 'input[name="version_available[]"]:first' ).remove();
					}
					if ( 0 == jQuery( 'input[name="version_available[]"]:first' ).length ) {
						delete response.data.args;

						jQuery.post( ajaxurl, { action: 'tm_redirect_to_dashboard', key: key }, function( response ) {
							jQuery( '.log' ).append( '<li>' + response.data.message + '</li>' );
							window.removeEventListener( 'beforeunload', window.eoxiaJS.fraisPro.updateManager.safeExit );
							window.location = response.data.url;
						});
					} else {

						if ( response.data.args && response.data.args.resetArgs ) {
							delete response.data.args;
						}
						window.eoxiaJS.fraisPro.updateManager.requestUpdate( response.data.args );
					}
				} else {
					window.eoxiaJS.fraisPro.updateManager.requestUpdate( response.data.args );
				}
			} )
			.fail( function( error, t, r ) {
				// @todo Gérer ce cas dans une action personnalisée.
				jQuery( '.log' ).append( '<li>Erreur: veuillez consulter les logs de la version: ' + versionToUpdate + '</li>' );
				jQuery.post( ajaxurl, { action: 'tm_redirect_to_dashboard', key: key, error_version: versionToUpdate, error_status: error.status, error_text: error.responseText }, function( response ) {
					window.removeEventListener( 'beforeunload', window.eoxiaJS.fraisPro.updateManager.safeExit );
					// window.location = response.data.url;
				});
			} );
		}
	}

	if ( jQuery( '.no-update' ).length ) {
		jQuery.post( ajaxurl, { action: 'tm_redirect_to_dashboard', key: key }, function( response ) {
			jQuery( '.log' ).append( '<li>' + response.data.message + '</li>' );
			window.removeEventListener( 'beforeunload', window.eoxiaJS.fraisPro.updateManager.safeExit );
			window.location = response.data.url;
		});
	}
};

/**
 * Vérification avant la fermeture de la page si la mise à jour est terminée.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param  {WindowEventHandlers} event L'évènement de la fenêtre.
 * @return {string}
 */
window.eoxiaJS.fraisPro.updateManager.safeExit = function( event ) {
	if ( fraisPro.updateDataUrlPage === event.currentTarget.adminpage ) {
		var confirmationMessage = fraisPro.confirmUpdateManagerExit;
		event.returnValue = confirmationMessage;
		return confirmationMessage;
	}
};
