window.eoxiaJS.fraisPro = {};

/**
 * Initialise l'objet "Line" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.0.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.line = {};

/**
 * Initialise l'objet.
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.line.init = function() {
	window.eoxiaJS.fraisPro.line.event();
};

/**
 * Gestion des évènements
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.event = function() {
	jQuery( document ).on( 'focus', '.list-line input[type=text]', window.eoxiaJS.fraisPro.line.selectInputValue );
	jQuery( document ).on( 'keyup', '.list-line input[type=text]', window.eoxiaJS.fraisPro.line.checkInputStatus );
	jQuery( document ).on( 'blur', '.list-line input[type=text]', window.eoxiaJS.fraisPro.line.save );
};

/**
 * Sélection automatique de la valeur du champs sélectionnée.
 *
 * @param  {[type]} element  [description]
 * @param  {[type]} response [description]
 *
 * @return {void}          [description]
 */
window.eoxiaJS.fraisPro.line.selectInputValue = function( element, response ) {
	jQuery( this ).select();
};

/**
 * Enregistrement d'une ligne.
 *
 * @param  {[type]} element  [description]
 * @param  {[type]} response [description]
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.save = function( event, element ) {
	element = element ? element : jQuery( this );
	var parentElement = element.closest( 'div.line-content' );
	var listInput = window.eoxiaJS.arrayForm.getInput( parentElement );
	var data = {
		'action': 'fp_update_line',
		'_wpnonce': parentElement.closest( 'div.list-line' ).data( 'nonce' ),
		'id': parentElement.closest( 'div.line' ).data( 'id' ),
		'parent_id': parentElement.closest( 'div.single-note' ).data( 'id' )
	};

	if ( jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut ) {
		clearTimeout( jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut );
	}
	parentElement.closest( 'div.single-note' ).find( '.wpeo-notification' ).addClass( 'notification-active' );
	parentElement.closest( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( fraisPro.updateInProgress );
	parentElement.closest( 'div.single-note' ).find( '.note-last-update' ).html( fraisPro.updateInProgress );

	for ( i = 0; i < listInput.length; i++ ) {
		if ( listInput[i].name ) {
			data[listInput[i].name] = window.eoxiaJS.arrayForm.getInputValue( listInput[i] );
		}
	}

	window.eoxiaJS.request.send( parentElement, data );
};

/**
 * After line is saved. Do some action.
 *
 * @param  {[type]} element  [description]
 * @param  {[type]} response [description]
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.lineSaved = function( element, response ) {
	jQuery( '.note-recap .note-ttc span.value' ).html( response.data.note.data.tax_inclusive_amount );
	jQuery( '.note-recap .note-tva span.value' ).html( response.data.note.data.tax_amount );
	jQuery( 'div[data-id=' + response.data.line.data.id + '] input[name=tax_inclusive_amount]' ).val( response.data.line.data.tax_inclusive_amount );
	jQuery( 'div[data-id=' + response.data.line.data.id + '] input[tax_amount]' ).val( response.data.line.data.tax_amount );
	jQuery( '.title .note-last-update' ).html( response.data.note_last_update );

	jQuery( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( fraisPro.updateDone );
	jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut = setTimeout( function() {
		jQuery( 'div.single-note' ).find( '.wpeo-notification' ).removeClass( 'notification-active' );
		jQuery( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( '' );
	}, 3000 );
};

/**
 * Display new created line.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.line.displayLine = function( element, response ) {
	if ( 1 === jQuery( 'div.list-line .table-row.line.notice-info' ).length ) {
		jQuery( 'div.list-line .table-row.line.notice-info' ).hide();
	}

	jQuery( 'div.list-line' ).prepend( response.data.view );
};

/**
 * Delete a line from display after user delete it.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.line.deleteLineFromDisplay = function( element, response ) {
	jQuery( element ).closest( '.line' ).fadeOut( function() {
		window.eoxiaJS.fraisPro.note.checkGotLine( jQuery( element ).closest( 'div.single-note' ) );
	} );
};

/**
 * Check a line status, after an element is changed on the line.
 *
 * @param  {[type]} event [description]
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.checkInputStatus = function( event ) {
	var currentInputValue = jQuery( this ).val();

	window.eoxiaJS.fraisPro.line.setStatusField( jQuery( this ).closest( 'div.form-element' ), true );

	window.eoxiaJS.fraisPro.line.checkLineStatus( jQuery( this ) );
};

/**
 * Check a line status, after an element is changed on the line.
 *
 * @param  {[type]} event [description]
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.checkLineStatus = function( element ) {
	var line = element.closest( 'div.line-content' );
	var lineAction = line.children( 'div.status' );
	var pinStatus = lineAction.find( 'span.pin' );

	var hasError = false;
	line.children( 'div.form-element' ).each( function() {
		if ( jQuery( this ).hasClass( 'input-error' ) ) {
			hasError = true;
		}
	} );

	if ( hasError ) {
		if ( ! pinStatus.hasClass( 'line-error' ) ) {
			pinStatus.removeClass( 'line-ok' );
			pinStatus.addClass( 'line-error' );
			lineAction.attr( 'aria-label', fraisPro.lineStatusInvalid );
		}
	} else {
		if ( ! pinStatus.hasClass( 'line-ok' ) ) {
			pinStatus.removeClass( 'line-error' );
			pinStatus.addClass( 'line-ok' );
			lineAction.attr( 'aria-label', fraisPro.lineStatusValid );
		}
	}
};

/**
 * Applique ou enlève la classe erreur sur les champs, selon si ils sont correctement renseignés.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param  {HTMLULListElement} element L'élément contenant les champs 'contenteditable'.
 * @param  {boolean} action           Action a effectuer: ajouter/supprimer.
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.setStatusField = function( element, action ) {
	var input = element.find( 'input' ).val();
	var isRequired = false;
	if ( element.hasClass( 'input-is-required' ) ) {
		isRequired = true;
	}

	if ( isRequired && action && ( ( '' === input ) || ( 0 == input ) ) ) {
		element.addClass( 'input-error' );
	} else {
		element.removeClass( 'input-error' );
	}
};

/**
 * Permet ou supprime la possibilité d'écrire dans un champs de type text selon le type de note sélectionné.
 *
 * @since 1.2.0
 * @version 1.4.0
 *
 * @param  {HTMLULListElement} element L'élément contenant les champs 'contenteditable'.
 * @param  {string} nameField         Le champ contenteditable en question.
 * @param  {boolean} enabled          Rendre enabled ou pas.
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.setReadOnly = function( element, nameField, enabled ) {
	if ( ! enabled ) {
		element.find( '.' + nameField ).removeClass( 'form-element-disable' );
	} else {
		element.find( '.' + nameField ).addClass( 'form-element-disable' );
	}
	element.find( '.' + nameField + ' input[type=text]' ).attr( 'readonly', enabled );
};

/**
 * Rafraichit le bouton permettant d'associer une image a une ligne.
 *
 * @since 1.2.0
 * @version 1.4.0
 *
 * @param  {HTMLULListElement} args
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.line.eoUploadAssociatedFile = function( args ) {
	if ( window.eoxiaJS.upload.currentButton.hasClass( 'media-grid' ) ) {
		window.eoxiaJS.upload.currentButton = args.element.closest( '.line' ).find( '.media.media-list' );
	} else {
		window.eoxiaJS.upload.currentButton = args.element.closest( '.line' ).find( '.media.media-grid' );
	}
	window.eoxiaJS.upload.refreshButton( args.response.data );
};

/**
 * Initialise l'objet note de frais ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.noteUnaffected = {};


/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.noteUnaffected.init = function() {
	jQuery( document ).on( 'click', '.list-line .line input[type="checkbox"]', window.eoxiaJS.fraisPro.noteUnaffected.checkLine );
	jQuery( document ).on( 'click', '.bloc-reassign .wpeo-button', window.eoxiaJS.fraisPro.noteUnaffected.reassignLineUnaffected );
};

window.eoxiaJS.fraisPro.noteUnaffected.checkLine = function( event ) {
	var lineNb = 0;
	jQuery( this ).closest( '.list-line' ).find( 'input[type="checkbox"]' ).each( function() {
		if ( jQuery( this ).is( ':checked' ) ) {
			lineNb++;
		}
	});
	jQuery( 'span.fp_lines_to_reassign' ).html( lineNb );

	window.eoxiaJS.fraisPro.noteUnaffected.buttonState();
};

/**
 * Récupères toutes les données nécesseraires envoyé d'envoyer la requête XHR pour réassigner les lignes désaffectées.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param  {ClickEvent} event L'état du clic.
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.noteUnaffected.reassignLineUnaffected = function( event ) {
	var data = {};
	var linesToReassignId = [];

	if ( jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut ) {
		clearTimeout( jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut );
	}
	jQuery( this ).closest( 'div.single-note' ).find( '.wpeo-notification' ).addClass( 'notification-active' );
	jQuery( this ).closest( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( fraisPro.updateInProgress );

	data.action           = jQuery( this ).closest( '.bloc-reassign' ).find( 'input[name="action"]' ).val();
	data._wpnonce         = jQuery( this ).closest( '.bloc-reassign' ).find( 'input[name="_wpnonce"]' ).val();
	data._wp_http_referer = jQuery( this ).closest( '.bloc-reassign' ).find( 'input[name="_wp_http_referer"]' ).val();
	data.parent_id        = jQuery( 'input[name="selected_note_id"]' ).val();

	jQuery( '.list-line input[type="checkbox"]:checked' ).each( function( key, element ) {
		linesToReassignId.push( jQuery( this ).val() );
	} );

	data.lines_id        = linesToReassignId;
	data.current_note_id = jQuery( '.single-note input[name="id"]' ).val();

	window.eoxiaJS.loader.display( jQuery( this ) );
	window.eoxiaJS.request.send( jQuery( this ), data );
};

/**
 * Le callback en cas de réussite à la requête Ajax "reassign_lines".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.noteUnaffected.reassignedLineUnaffectedSuccess = function( element, response ) {
	window.eoxiaJS.loader.remove( element );

	element.addClass( 'button-disable' );

	jQuery( '.bloc-reassign .autocomplete-icon-after' ).click();
	jQuery( 'span.fp_lines_to_reassign' ).html( 0 );

	for ( var key in response.data.updated_lines_id ) {
		jQuery( '.list-line .line[data-id="' + response.data.updated_lines_id[key] + '"]' ).remove();
	}

	jQuery( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( fraisPro.lineAffectedSuccessfully );
	jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut = setTimeout( function() {
		jQuery( 'div.single-note' ).find( '.wpeo-notification' ).removeClass( 'notification-active' );
		jQuery( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( '' );
	}, 3000 );

	window.eoxiaJS.fraisPro.note.checkGotLine( jQuery( 'div.single-note' ) );
};

/**
 * Permet de définir l'état du bouton d'assignation des lignes a une note.
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.noteUnaffected.buttonState = function() {
	var haveCheckedLine = jQuery( '.list-line input[type="checkbox"]:checked' ).length > 0 ? true : false;
	var selectedNote = jQuery( 'input[name=selected_note_id]' ).val();
	var associationButton = jQuery( '.bloc-reassign' ).find( '.wpeo-button' );

	if ( haveCheckedLine && selectedNote.length ) {
		associationButton.removeClass( 'button-disable' );
	} else {
		associationButton.addClass( 'button-disable' );
	}
};

/**
 * Initialise l'objet note de frais ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note = {};

/**
 * Keep the button in memory.
 *
 * @type {Object}
 */
 window.eoxiaJS.fraisPro.note.currentButton;

/**
 * Keep the media frame in memory.
 * @type {Object}
 */
 window.eoxiaJS.fraisPro.note.mediaFrame;

/**
* Keep the media frame in memory.
* @type {Object}
*/
 window.eoxiaJS.fraisPro.note.focusedElement;

/**
 * Keep the selected media in memory.
 * @type {Object}
 */
 window.eoxiaJS.fraisPro.note.selectedInfos = [];

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.init = function() {
	jQuery( document ).on( 'click', '.list-note .note', window.eoxiaJS.fraisPro.note.goToLink );
	jQuery( document ).on( 'click', '.display-method span.wpeo-button', window.eoxiaJS.fraisPro.note.changeDisplayMode );
	jQuery( document ).on( 'click', '.wrap-frais-pro .fraispro-mass-line-creation', window.eoxiaJS.fraisPro.note.openMedia );
	jQuery( document ).on( 'click', '.validation_status.wpeo-dropdown li', window.eoxiaJS.fraisPro.note.changeNoteStatus );

	// jQuery( window ).on( 'scroll', window.eoxiaJS.fraisPro.note.scrollSticky );
};

/**
 * [description]
 * @param  {[type]} event [description]
 * @return {[type]}       [description]
 */
window.eoxiaJS.fraisPro.note.changeNoteStatus = function( event ) {
	var parentElement = jQuery( this ).closest( 'div' );

	if ( jQuery( this ).closest( '.single-note' ).length ) {
		var listInput = window.eoxiaJS.arrayForm.getInput( parentElement );
		var data = {
			'action': 'fp_update_note',
			'_wpnonce': jQuery( this ).closest( '.dropdown-content' ).data( 'nonce' ),
			'id': jQuery( this ).closest( '.single-note' ).attr( 'data-id' )
		};

		// D'abord on vérifier si l'utilisateur utilise un statut avec un traitement special.
		if ( 'closed' === jQuery( this ).attr( 'data-special-treatment' ) && ! confirm( fraisPro.confirmMarkAsPayed ) ) {
			return false;
		} else {
			if ( jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut ) {
				clearTimeout( jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut );
			}
			jQuery( this ).closest( 'div.single-note' ).find( '.note-last-update' ).html( fraisPro.updateInProgress );
			jQuery( this ).closest( 'div.single-note' ).find( '.wpeo-notification' ).addClass( 'notification-active' );
			jQuery( this ).closest( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( fraisPro.updateInProgress );
		}
	}

	parentElement.find( 'input' ).val( jQuery( this ).data( 'id' ) );
	parentElement.find( '.dropdown-toggle > span' ).html( jQuery( this ).html() );

	if ( jQuery( this ).closest( '.single-note' ).length ) {
		for ( i = 0; i < listInput.length; i++ ) {
			if ( listInput[i].name ) {
				data[listInput[i].name] = window.eoxiaJS.arrayForm.getInputValue( listInput[i] );
			}
		}

		window.eoxiaJS.request.send( parentElement, data );
	}

};

/**
 * Redirige l'utilisateur sur la note
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.goToLink = function( event ) {
	window.location.href = jQuery( this ).data( 'link' );
};

/**
 * Redirige l'utilisateur sur la note
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.goToNote = function( element, response ) {
	window.location.href = response.data.link;
};

/**
 * Redirige l'utilisateur sur la note
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.changeDisplayMode = function( event ) {
	event.preventDefault();
	jQuery( this ).closest( 'div.single-note' ).toggleClass( 'grid list' );
	jQuery( this ).closest( 'div.display-method' ).children( 'span' ).toggleClass( 'active' );
};

/**
 * [description]
 * @param  {[type]} event [description]
 * @return {[type]}       [description]
 */
window.eoxiaJS.fraisPro.note.openMedia = function( event ) {
	window.eoxiaJS.fraisPro.note.currentButton = jQuery( this );
	event.preventDefault();

	window.eoxiaJS.fraisPro.note.mediaFrame = new window.wp.media.view.MediaFrame.Post({}).open();
	window.eoxiaJS.fraisPro.note.mediaFrame.on( 'insert', function() {
		window.eoxiaJS.fraisPro.note.selectedFile();
	} );
};
/**
 * [description]
 * @param  {[type]} element [description]
 * @return {[type]}         [description]
 */
window.eoxiaJS.fraisPro.note.selectedFile = function( element ) {
	var data = {
		action: 'fp_create_line_from_picture',
		_wpnonce: window.eoxiaJS.fraisPro.note.currentButton.attr( 'data-nonce' ),
		files_id: window.eoxiaJS.fraisPro.note.selectedInfos,
		note_id: window.eoxiaJS.fraisPro.note.currentButton.attr( 'data-parent-id' )
	};

	window.eoxiaJS.fraisPro.note.mediaFrame.state().get( 'selection' ).map( function( attachment ) {
		window.eoxiaJS.fraisPro.note.selectedInfos.push( attachment.id );
	} );

	jQuery( '.single-note' ).find( '.date_modified_value' ).addClass( 'loading' );
	window.eoxiaJS.fraisPro.note.currentButton.addClass( 'loading' );
	jQuery.post( window.ajaxurl, data, function( response ) {
		window.eoxiaJS.fraisPro.note.currentButton.removeClass( 'loading' );
		window.eoxiaJS.fraisPro.note.currentButton = undefined;
		window.eoxiaJS.fraisPro.note.selectedInfos = [];
		window.eoxiaJS.fraisPro.note.mediaFrame = undefined;
		if ( response.success ) {
			jQuery( 'div.list-line' ).prepend( response.data.view );
		}
	}, 'json' );
};

/**
 * Delete the archived note from display.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.noteArchived = function( element, response ) {
	// Check if the user is on list or in a single note
	if ( 1 === jQuery( '.list-note' ).length ) {
		jQuery( 'tr.note[data-id=' + response.data.note.data.id + ']' ).fadeOut();
	} else {
		window.location.href = response.data.link;
	}
};

/**
 * Lorsqu'on scroll, attaches le header en position fixe pour suivre la page.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param  {ScrollEvent} event Les données du curseur et de la page.
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.note.scrollSticky = function( event ) {
	var offset = -20;
	if ( jQuery( window ).scrollTop() >= jQuery( '.single-note .header' ).position().top + offset ) {
		jQuery( '.single-note .header' ).addClass( 'sticky' );
	}

	if ( jQuery( '.single-note .header' ).hasClass( 'sticky' ) && jQuery( window ).scrollTop() <= 0 ) {
		jQuery( '.single-note .header' ).removeClass( 'sticky' );
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "export_note".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.exportedfraisProSuccess = function( triggeredElement, response ) {
	jQuery( '.document-list-container .notice.notice-info' ).remove();
	jQuery( '.document-list-container table.wpeo-table tbody' ).prepend( response.data.item_view );

	triggeredElement.closest( '.note' ).find( '.note-action' ).html( response.data.actions_view ).find( '.wpeo-dropdown.fp-note-export-dropdown' ).addClass( 'dropdown-active' );
	triggeredElement.closest( '.single-note' ).find( '.export.toggle' ).html( response.data.actions_view ).find( '.wpeo-dropdown.fp-note-export-dropdown' ).addClass( 'dropdown-active' );
};

/**
 * Le callback en cas de réussite à la requête Ajax "update_note".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.noteUpdated = function( triggeredElement, response ) {
	jQuery( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( fraisPro.updateDone );
	jQuery( 'div.single-note' ).find( '.wpeo-notification' )[0].fraisProTimeOut = setTimeout( function() {
		jQuery( 'div.single-note' ).find( '.wpeo-notification' ).removeClass( 'notification-active' );
		jQuery( 'div.single-note' ).find( '.wpeo-notification .notification-title' ).html( '' );
	}, 3000 );
	jQuery( 'div.single-note' ).find( '.note-last-update' ).html( response.data.note.data.date_modified.rendered.date_human_readable );

	if ( 'closed' === response.data.status.data.special_treatment ) {
		window.location.href = response.data.link;
	}
};

/**
 * Le callback en cas de réussite à la requête Ajax "delete_all_lines".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.note.deletedAllLine = function( triggeredElement, response ) {
	triggeredElement.closest( '.note' ).find( '.note-title .count-line' ).text( '(' + response.data.countLine + ')' );
	window.eoxiaJS.dropdown.close();
};

/**
 * Vérifie si la note ne contient plus de ligne, si c'est le cas, on réaffiche le message "Actually you do not have any line in this note".
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param  {HTMLElement} element La note en elle même.
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.note.checkGotLine = function( element ) {
	if ( 0 == jQuery( element ).find( '.wpeo-table.list-line .table-row:visible' ).length ) {
		jQuery( element ).find( '.table-row.notice-info' ).show();
	}
};

/**
 * Initialise l'objet "lineType" ainsi que la méthode "init" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.2.0
 * @version 1.4.0
 */

window.eoxiaJS.fraisPro.lineType = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 * *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.lineType.init = function() {
	window.eoxiaJS.fraisPro.lineType.event();
};

/**
 * Gestion des évènements
 *
 * @since 1.2.0
 * @version 1.2.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.lineType.event = function() {
	jQuery( document ).on( 'click', '.type .wpeo-dropdown li', window.eoxiaJS.fraisPro.lineType.select );
};

/**
 * Change les états des champs au changement.
 *
 * @since 1.2.0
 * @version 1.4.0
 *
 * @param  {ClickEvent} event L'état lors du clic.
 * @return {void}
 *
 */
window.eoxiaJS.fraisPro.lineType.select = function( event ) {
	var parent = jQuery( this ).closest( '.wpeo-dropdown' );
	var line = jQuery( this ).closest( 'div.line-content' );
	var inputIsReadOnly = '';
	var inputIsRequired = '';

	parent.find( 'input' ).val( jQuery( this ).data( 'id' ) );
	parent.find( '.dropdown-toggle > span' ).html( jQuery( this ).html() );

	// Change the state of current input to no error.
	jQuery( this ).closest( 'div.form-element' ).removeClass( 'input-error' );

	// If there is a special treatment key on cliqued element, launch specific action.
	if ( jQuery( this ).data( 'special-treatment' ) ) {
		inputIsReadOnly = true;
		inputIsRequired = true;
	} else {
		inputIsReadOnly = false;
		inputIsRequired = false;
	}

	// Check input value for displaying or not error on line.
	window.eoxiaJS.fraisPro.line.setStatusField( jQuery( this ).closest( 'div.line-content' ).find( '.distance' ), inputIsRequired );
	window.eoxiaJS.fraisPro.line.setStatusField( jQuery( this ).closest( 'div.line-content' ).find( '.ttc' ), ! inputIsRequired );
	window.eoxiaJS.fraisPro.line.setStatusField( jQuery( this ).closest( 'div.line-content' ).find( '.tva' ), ! inputIsRequired );

	// Mark field as readonly for KM by default. And remove readonly on amounts.
	window.eoxiaJS.fraisPro.line.setReadOnly( line, 'distance', ! inputIsReadOnly );
	window.eoxiaJS.fraisPro.line.setReadOnly( line, 'ttc', inputIsReadOnly );
	window.eoxiaJS.fraisPro.line.setReadOnly( line, 'tva', inputIsReadOnly );

	window.eoxiaJS.fraisPro.line.checkLineStatus( jQuery( this ) );

	window.eoxiaJS.fraisPro.line.save( undefined, jQuery( this ) );
};

/**
 * Initialise l'objet note de frais ainsi que la méthode "init" de l'objet "search" obligatoire pour la bibliothèque EoxiaJS.
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.search = {};

/**
 * La méthode appelée automatiquement par la bibliothèque EoxiaJS.
 *
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.search.init = function() {
	window.eoxiaJS.fraisPro.search.event();
};

/**
 * Les évènements de la recherche.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.search.event = function() {
	jQuery( document ).on( 'click', '.autocomplete-search-list li', window.eoxiaJS.fraisPro.search.select );
	jQuery( document ).on( 'click', '.bloc-reassign .autocomplete-search-list li', window.eoxiaJS.fraisPro.search.selectNote );
	jQuery( document ).on( 'change', 'input[name=selected_note_id]', window.eoxiaJS.fraisPro.noteUnaffected.buttonState );
};

/**
 * Met l'ID dans un input caché.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param MouseEvent L'état de la souri au moment du clic
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.search.select = function( event ) {
	var parent = jQuery( this ).closest( '.wpeo-autocomplete' );

	parent.find( 'input[type="hidden"]' ).val( jQuery( this ).data( 'id' ) );
	parent.find( 'input[type="hidden"]' ).change();
	parent.find( 'input.autocomplete-search-input' ).val( jQuery( this ).data( 'result' ) );
};

/**
 * Lors de la sélection d'une note, rend le bouton enable.
 *
 * @since 1.4.0
 * @version 1.4.0
 *
 * @param MouseEvent L'état de la souri au moment du clic
 *
 * @return {void}
 */
window.eoxiaJS.fraisPro.search.selectNote = function( event ) {
	window.eoxiaJS.fraisPro.noteUnaffected.buttonState();
};

/**
 * Le callback en cas de réussite à la requête Ajax "fp_search_notes".
 *
 * @param  {HTMLDivElement} triggeredElement  L'élement HTML déclenchant la requête Ajax.
 * @param  {Object}         response          Les données renvoyées par la requête Ajax.
 * @return {void}
 *
 * @since 1.4.0
 * @version 1.4.0
 */
window.eoxiaJS.fraisPro.search.searchedSuccess = function( triggeredElement, response ) {
	jQuery( 'table.list-note:not( .list-note-unaffected )' ).replaceWith( response.data.view );
};
